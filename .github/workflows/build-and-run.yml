name: Build-And-Run Tests

on: [pull_request, push]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  build_and_test:
    env:
      ALL_EXCLUDE: stage_dem|pybind\.unwrap\.phass


    defaults:
      run:
        shell: bash -l {0}
    
    strategy:
      fail-fast: false
      matrix:
        os:
          - label: Linux
            runner: ubuntu-latest
            ctest_exclude: -E ".*($ALL_EXCLUDE)"
          - runner: macos-latest
            label: macOS
            ctest_exclude: -E ".*($ALL_EXCLUDE|io\.gdal\.raster|unwrap\.snaphu|background)"
        deps:
          - label: Latest
            env-file: .github/conda_envs/environment.yml
            extra-specs: ""
        build-type: [ Release, Debug ]
        include:
          - os:
              label: Linux
              runner: ubuntu-latest
              ctest_exclude: -E ".*($ALL_EXCLUDE|ionosphere)"
            deps:
              label: Minimum
              env-file: .github/conda_envs/minimum-reqs.yml
              extra-specs: "gsl"
            build-type: Release

    name: Build And Test - ${{ matrix.os.label }} ${{ matrix.deps.label }} ${{ matrix.build-type }}
    runs-on: ${{ matrix.os.runner }}
    steps:
      # Typical github repo checkout step
      - name: Github Repo Checkout
        uses: actions/checkout@v2

      # Prints the variables for this run to simplify debugging
      - name: Print Run Variables
        run: |
          echo Runner OS: ${{ matrix.os.runner }}
          echo Environment: ${{ matrix.deps.env-file }}
          echo Build Type: ${{ matrix.build-type }}
          echo ctest exclude command: ${{ matrix.os.ctest_exclude }}
          echo Depenencies: ${{ matrix.deps.extra-specs }}

      # Set the conda environment up using Mamba and the dependencies for this run
      - name: Setup Environment
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ${{ matrix.deps.env-file }}
          environment-name: isce3
          extra-specs: ${{ matrix.deps.extra-specs }}

      # Preset environment variables in the conda environment for later steps
      - name: Environment Variables Preset
        run: |
          conda env config vars set ISCE3_PREFIX=$GITHUB_WORKSPACE/install
          conda env config vars set PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE/install/packages

      
      # Get cmake command configured with relevant build information
      - name: Configure cmake
        run: |
          cmake \
            -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
            -DCMAKE_INSTALL_PREFIX=$ISCE3_PREFIX \
            -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
            .
      
      # Build the project
      - name: Build Project
        run: |
          cmake --build build --parallel
      
      # Install the project
      - name: Install Project
        run: |
          cmake --build build --target install --parallel
      
      # Set the LD_LIBRARY_PATH and DYLD_LIBRARY_PATH variables
      - name: Set Link Library Environment Variables
        run: |
          if test -d "$ISCE3_PREFIX/lib64"; then
            conda env config vars set LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ISCE3_PREFIX/lib64
            if [ "$RUNNER_OS" == "macOS" ]; then
              conda env config vars set DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$ISCE3_PREFIX/lib64
            fi
          else
            conda env config vars set LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ISCE3_PREFIX/lib
            if [ "$RUNNER_OS" == "macOS" ]; then
              conda env config vars set DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:$ISCE3_PREFIX/lib
            fi
          fi

      # Run ctest on the project with the intended test exclusions for this run
      - name: Test Project
        run: |
          cd build
          ctest --output-on-failure ${{ matrix.os.ctest_exclude }}
