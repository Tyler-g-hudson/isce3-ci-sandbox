name: Build-And-Run Tests

on: [push]

jobs:
  build_and_test:
    defaults:
      run:
        shell: bash -l {0}
    
    strategy:
      fail-fast: false
      matrix:
        all-exclude: [stage_dem]
        os: [macos-latest, ubuntu-latest]
        include:
        - os: macos-latest
          ctest_exclude: -E ".*(${{ matrix.all-exclude }}|raster|unwrap.snaphu)"
        - os: ubuntu-latest
          ctest_exclude: -E ".*(${{ matrix.all-exclude }})"
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: Github Repo Checkout
        uses: actions/checkout@v2
      - name: Setup Python v3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Setup Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge,nodefaults
          auto-activate-base: false
          activate-environment: isce3-ci-sandbox
          environment-file: environment.yml
      - name: Environment Variables Preset
        run: |
          conda env config vars set PYTHONPATH=$CONDA/envs/isce3-ci-sandbox/bin/python
          if test -d "${GITHUB_WORKSPACE}/install/prefix/lib64"; then
            export LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/prefix/lib64:$CONDA/envs/isce3-ci-sandbox/bin/ld
          else
            export LD_LIBRARY_PATH=${GITHUB_WORKSPACE}/install/prefix/lib:$CONDA/envs/isce3-ci-sandbox/bin/ld
          fi
          conda env config vars set LD_LIBRARY_PATH=$LD_LIBRARY_PATH
          if [ "$RUNNER_OS" == "macOS" ]; then
            conda env config vars set DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH
          fi
      - name: Configure CMAKE
        run: |
          cmake \
            -B build \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-fdiagnostics-color=auto" \
            -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/install/prefix \
            -DCMAKE_PREFIX_PATH=$CONDA_PREFIX \
            .
      - name: Build Project
        run: |
          cmake --build build --target install --parallel
      - name: Test Project
        run: |
          ctest --test-dir build --output-on-failure ${{ matrix.ctest_exclude }}
